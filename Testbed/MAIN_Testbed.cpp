// Testbed.cpp : Defines the entry point for the console application.
//

#include "CellInputData.h"
#include "LatticeConverter.h"
#include "LRL_Cell.h"
#include "LRL_Cell_Degrees.h"
#include "LRL_LatticeMatcher.h"
#include "LRL_ReadLatticeData.h"
#include "LRL_StringTools.h"
#include "MatN.h"
#include "MatS6.h"
#include "S6.h"

std::string Letters( void ) {
   return "V,G,D,S,P,A,B,C,I,F,R,C3,G6,S6,B4,D7,H";
}

std::vector<LRL_ReadLatticeData> GetInputCells( void ) {
   const std::string letters = Letters( );
   std::string lattice;
   std::vector<LRL_ReadLatticeData> cellDataList;
   LRL_ReadLatticeData rcd;
   while (lattice != "EOF") {
      rcd.read( );
      lattice = rcd.GetLattice( );
      if ((!lattice.empty( )) && (letters.find( static_cast<char>(toupper( lattice[0] )) ) != std::string::npos))
         cellDataList.push_back( rcd );
   }

   return cellDataList;
}

std::vector<S6> GetInputSellingReducedVectors( const std::vector<LRL_ReadLatticeData>& input ) {
   std::vector<S6> v;
   LatticeConverter converter;

   MatS6 mat;
   for (size_t i = 0; i < input.size( ); ++i) {
      const S6 s6 = converter.SellingReduceCell( input[i].GetLattice( ), input[i].GetCell( ), mat );
      v.push_back( s6 );
   }
   return v;
}
//}

S6 CenterOfMass(const std::vector<S6>& v) {
   S6 sum("0 0 0 0 0 0 ");
   for (size_t i = 0; i < 6; ++i)
      sum += v[i];
   return sum / double(v.size( ));
}

std::vector<S6> MoveToCenterOfMass(const std::vector<S6>& v) {
   std::vector<S6> c;
   const S6 cm = CenterOfMass(v);
   for (size_t i = 0; i < v.size( ); ++i)
      c.push_back(v[i] - cm);
   return c;
}

MatS6 SumS6(const std::vector<S6>& v) {
   S6 t;
   for (size_t i = 0; i < v.size( ); ++i)
      t += v[i];

   //sums of squares
   double x0 = 0.0;
   double x1 = 0.0;
   double x2 = 0.0;
   double x3 = 0.0;
   double x4 = 0.0;
   double x5 = 0.0;

   // sums of cross
   double x0x1 = 0.0;
   double x0x2 = 0.0;
   double x0x3 = 0.0;
   double x0x4 = 0.0;
   double x0x5 = 0.0;

   double x1x2 = 0.0;
   double x1x3 = 0.0;
   double x1x4 = 0.0;
   double x1x5 = 0.0;

   double x2x3 = 0.0;
   double x2x4 = 0.0;
   double x2x5 = 0.0;

   double x3x4 = 0.0;
   double x3x5 = 0.0;

   double x4x5 = 0.0;

   for (size_t i = 0; i < v.size( ); ++i) {
      const double& s0 = v[i][0];
      const double& s1 = v[i][1];
      const double& s2 = v[i][2];
      const double& s3 = v[i][3];
      const double& s4 = v[i][4];
      const double& s5 = v[i][5];

      x0 += s0 * s0;
      x1 += s1 * s1;
      x2 += s2 * s2;
      x3 += s3 * s3;
      x4 += s4 * s4;
      x5 += s5 * s5;


      x0x1 += s0 * s1;
      x0x2 += s0 * s2;
      x0x3 += s0 * s3;
      x0x4 += s0*s4;
      x0x5 += s0*s5;
                
      x1x2 += s1*s2;
      x1x3 += s1*s3;
      x1x4 += s1*s4;
      x1x5 += s1*s5;
                
      x2x3 += s2*s3;
      x2x4 += s2*s4;
      x2x5 += s2*s5;
                
      x3x4 += s3*s4;
      x3x5 += s3*s5;
                
      x4x5 += s4*s5;

   }

   const double sumsx2 = x0 + x1 + x2 + x3 + x4 + x5;

   MatS6 m;

   m[0] = sumsx2 - x0;
   m[7] = sumsx2 - x1;
   m[14] = sumsx2 - x2;
   m[21] = sumsx2 - x3;
   m[28] = sumsx2 - x4;
   m[35] = sumsx2 - x5;

   m[1] = -x0x1;
   m[2] = -x0x2;
   m[3] = -x0x3;
   m[4] = -x0x4;
   m[5] = -x0x5;

   m[6] = m[1];
   m[8] = -x1x2;
   m[9] = -x1x3;
   m[10] = -x1x4;
   m[11] = -x1x5;

   m[12] = m[2];
   m[13] = m[8];
   m[15] = -x2x3;
   m[16] = -x2x4;
   m[17] = -x2x5;

   m[18] = m[3];
   m[19] = m[9];
   m[20] = m[15];
   m[22] = -x3x4;
   m[23] = -x3x5;

   m[24] = m[4];
   m[25] = m[10];
   m[26] = m[16];
   m[27] = m[22];
   m[29] = -x4x5;

   m[30] = m[5];
   m[31] = m[11];
   m[32] = m[17];
   m[33] = m[23];
   m[34] = m[29];

   std::cout << m/1000.0 << std::endl << std::endl;

   return m;
}

MatS6 InertiaTensor( const S6& s ) {
   static const std::vector<MatS6> refl = MatS6::GetReflections( );

   std::vector<S6> vcm;
   std::vector<S6> vx;
   for (size_t i = 0; i < refl.size( ); ++i) vx.push_back( refl[i] * s );
   const S6 cm = CenterOfMass( vx );
   for (size_t i = 0; i < refl.size( ); ++i) vcm.push_back( vx[i] - cm );
   SumS6( vcm );
   return MatS6 ();
}

int main( int argc, char* argv[] )

{
   const std::vector<LRL_ReadLatticeData> input = GetInputCells( );
   MatS6 mat_reference;
   LRL_Cell cell_reference = LatticeConverter::SellingReduceCell( input[0].GetLattice(), input[0].GetCell(), mat_reference );
   const MV_Pair mv_reference(S6( cell_reference ), MatN(mat_reference.GetMatrix()).inverse());

   const std::vector<S6> vLat = GetInputSellingReducedVectors( input );

   for (size_t i = 0; i < vLat.size( ); ++i) {
      const MatS6 inertia = InertiaTensor( vLat[i] );
   }
   if (vLat.size( ) > 0) {
      LRL_LatticeMatcher lm;
      lm.SetReference( mv_reference );
      std::cout << "MV tree size = " << lm.size( ) << std::endl;

      const std::vector<S6> vs6( lm.MatchReference( vLat ) );

      for (size_t lat = 0; lat < vLat.size( ); ++lat) {
         std::cout << LRL_Cell_Degrees(vs6[lat]) << std::endl;
      }
   }

   return 0;
}

/*

f 10 10.001 10.002  89 89 89
f 10 10 10  90 90 90
f 11 10 10  90 90 90
f 10 11 10  90 90 90  this is the problem one 
f 10 10 11  90 90 90
end



f 10 10.001 10.002  90.01 90.02 90.03
f 10 10 10  90 90 90
f 11 10 10  90 90 90
f 10 11 10  90 90 90  this is the problem one
f 10 10 11  90 90 90
end


f 10 10.001 10.002  90 90 90
f 10 10 10  90 90 90
f 11 10 10  90 90 90
f 10 11 10  90 90 90  this is the problem one
f 10 10 11  90 90 90
end


f 10 10 10  90 90 90
f 11 10 10  90 90 90
f 10 11 10  90 90 90  this is the problem one
f 10 10 11  90 90 90
end

f 10 10 10  90 90 90
f 11 10 10  90 90 90
f 10 11 10  90 90 90  this is the problem one
end



f 10 10 10  90 90 90
i 10 10 10  90 90 90
p  10 10 10  90 90 90
f 10 10 10  90 90 90
f 10 10 11  90 90 90
end

c 10 20 30 90 118 90
p   27.14100  11.18034  26.80144     93.90767 158.64514  95.59396
p   27.14100  11.18034  26.80144     93.90767 158.64514  95.59396
p   27.14100  11.18034  26.80144     93.90767 158.64514  95.59396
p   27.14100  11.18034  11.18034    126.86990  95.59396  95.59396
p   27.14100  26.80144  11.18034     93.90767  95.59396 158.64514
p   27.14100  26.80144  11.18034     93.90767  95.59396 158.64514
p   27.14100  11.18034  11.18034    126.86990  95.59396  95.59396
p   27.14100  11.18034  26.80144     93.90767 158.64514  95.59396
p   11.18034  27.14100  26.80144    158.64514  93.90767  95.59396
p   11.18034  27.14100  11.18034     95.59396 126.86990  95.59396
p   11.18034  26.80144  27.14100    158.64514  95.59396  93.90767
p   11.18034  26.80144  11.18034     93.90767 126.86990  93.90767
p   11.18034  11.18034  27.14100     95.59396  95.59396 126.86990
p   11.18034  11.18034  26.80144     93.90767  93.90767 126.86990
p   26.80144  27.14100  11.18034     95.59396  93.90767 158.64514
p   26.80144  27.14100  11.18034     95.59396  93.90767 158.64514
p   26.80144  11.18034  27.14100     95.59396 158.64514  93.90767
p   26.80144  11.18034  11.18034    126.86990  93.90767  93.90767
p   26.80144  11.18034  27.14100     95.59396 158.64514  93.90767
p   26.80144  11.18034  11.18034    126.86990  93.90767  93.90767
p   11.18034  27.14100  11.18034     95.59396 126.86990  95.59396
p   11.18034  27.14100  26.80144    158.64514  93.90767  95.59396
p   11.18034  11.18034  27.14100     95.59396  95.59396 126.86990
p   11.18034  11.18034  26.80144     93.90767  93.90767 126.86990
p   11.18034  26.80144  27.14100    158.64514  95.59396  93.90767
p   11.18034  26.80144  11.18034     93.90767 126.86990  93.90767
p   28.32800  11.18034  26.80144     86.09233 156.81153 107.53456
p   27.14100  28.32800  26.80144    156.81153  21.35486 156.87148
p   27.14100  11.18034  10.00000    116.56505 102.58967  84.40604
p   27.14100  28.32800  10.00000     88.14729 102.58967 156.87148
p   28.32800  11.18034  28.32800    109.28080 138.65723 107.53456
p   10.00000  28.32800  26.80144    156.81153  98.76519  91.85271
p   28.32800  11.18034  11.18034     53.13010 109.28080 107.53456
p   27.14100  28.32800  11.18034    109.28080  84.40604 156.87148
p   27.14100  11.18034  28.32800    109.28080 156.87148  84.40604
p   27.14100  28.32800  28.32800     41.34277 156.87148 156.87148
p   28.32800  11.18034  10.00000    116.56505  91.85271 107.53456
p   28.32800  10.00000  11.18034    116.56505 107.53456  91.85271
p   10.00000  26.80144  11.18034     86.09233 116.56505  98.76519
p   27.14100  10.00000  11.18034    116.56505  84.40604 102.58967
p   27.14100  26.80144  28.32800    156.81153 156.87148  21.35486
p   27.14100  10.00000  28.32800     88.14729 156.87148 102.58967
p   10.00000  26.80144  28.32800    156.81153  91.85271  98.76519
p   28.32800  28.32800  11.18034    109.28080 107.53456 138.65723
p   28.32800  27.14100  26.80144     21.35486 156.81153 156.87148
p   11.18034  28.32800  26.80144    156.81153  86.09233 107.53456
p   11.18034  27.14100  28.32800    156.87148 109.28080  84.40604
p   11.18034  28.32800  28.32800    138.65723 109.28080 107.53456
p   28.32800  27.14100  10.00000    102.58967  88.14729 156.87148
p   28.32800  10.00000  26.80144     98.76519 156.81153  91.85271
p   28.32800  27.14100  11.18034     84.40604 109.28080 156.87148
p   11.18034  28.32800  11.18034    109.28080  53.13010 107.53456
p   11.18034  27.14100  10.00000    102.58967 116.56505  84.40604
p   11.18034  28.32800  10.00000     91.85271 116.56505 107.53456
p   28.32800  27.14100  28.32800    156.87148  41.34277 156.87148
p   10.00000  28.32800  11.18034    107.53456 116.56505  91.85271
p   28.32800  26.80144  27.14100     21.35486 156.87148 156.81153
p   11.18034  28.32800  27.14100    156.87148  84.40604 109.28080
p   11.18034  26.80144  28.32800    156.81153 107.53456  86.09233
p   11.18034  28.32800  28.32800    138.65723 107.53456 109.28080
p   28.32800  26.80144  10.00000     98.76519  91.85271 156.81153
p   28.32800  10.00000  27.14100    102.58967 156.87148  88.14729
p   28.32800  26.80144  11.18034     86.09233 107.53456 156.81153
p   11.18034  28.32800  11.18034    107.53456  53.13010 109.28080
p   11.18034  26.80144  10.00000     98.76519 116.56505  86.09233
p   11.18034  28.32800  10.00000     88.14729 116.56505 109.28080
p   28.32800  26.80144  28.32800    156.81153  41.34277 156.81153
p   10.00000  28.32800  11.18034    109.28080 116.56505  88.14729
p   10.00000  11.18034  27.14100     84.40604 102.58967 116.56505
p   11.18034  10.00000  27.14100    102.58967  84.40604 116.56505
p   11.18034  11.18034  28.32800    109.28080 107.53456  53.13010
p   11.18034  10.00000  28.32800     91.85271 107.53456 116.56505
p   10.00000  11.18034  28.32800    107.53456  91.85271 116.56505
p   28.32800  28.32800  27.14100    156.87148 156.87148  41.34277
p   10.00000  11.18034  26.80144     86.09233  98.76519 116.56505
p   11.18034  10.00000  26.80144     98.76519  86.09233 116.56505
p   11.18034  11.18034  28.32800    107.53456 109.28080  53.13010
p   11.18034  10.00000  28.32800     88.14729 109.28080 116.56505
p   10.00000  11.18034  28.32800    109.28080  88.14729 116.56505
p   28.32800  28.32800  26.80144    156.81153 156.81153  41.34277
p   10.00000  27.14100  11.18034     84.40604 116.56505 102.58967
p   26.80144  10.00000  11.18034    116.56505  86.09233  98.76519
p   26.80144  27.14100  28.32800    156.87148 156.81153  21.35486
p   26.80144  10.00000  28.32800     91.85271 156.81153  98.76519
p   10.00000  27.14100  28.32800    156.87148  88.14729 102.58967
p   28.32800  28.32800  11.18034    107.53456 109.28080 138.65723
p   28.32800  11.18034  27.14100     84.40604 156.87148 109.28080
p   26.80144  28.32800  27.14100    156.87148  21.35486 156.81153
p   26.80144  11.18034  10.00000    116.56505  98.76519  86.09233
p   26.80144  28.32800  10.00000     91.85271  98.76519 156.81153
p   28.32800  11.18034  28.32800    107.53456 138.65723 109.28080
p   10.00000  28.32800  27.14100    156.87148 102.58967  88.14729
p   28.32800  11.18034  11.18034     53.13010 107.53456 109.28080
p   26.80144  28.32800  11.18034    107.53456  86.09233 156.81153
p   26.80144  11.18034  28.32800    107.53456 156.81153  86.09233
p   26.80144  28.32800  28.32800     41.34277 156.81153 156.81153
p   28.32800  11.18034  10.00000    116.56505  88.14729 109.28080
p   28.32800  10.00000  11.18034    116.56505 109.28080  88.14729
end

*/