#ifndef SVD_H
#define SVD_H

#include <vector>

void svdcmp(std::vector<std::vector<double> >& a, int m, int n, std::vector<double>& w, std::vector<std::vector<double> > & v);
void svdcmp(std::vector<std::vector<double> >& a, std::vector<double>& w, std::vector<std::vector<double> >& v);
void svdcmp(std::vector<std::vector<long double> >& a, int m, int n, std::vector<long double>& w, std::vector<std::vector<long double> > & v);

//void longdoublesvdcmp(std::vector<std::vector<double> >& a, int m, int n, std::vector<double>& w, std::vector<std::vector<double> > & v);


#endif  // 



//C++ source code
//http://users.telenet.be/paul.larmuseau/SVD.htm

#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>

template<typename T>
double sqr( const T a ) { return a*a; }

template<typename T1, typename T2>
double pythag(const T1 a, const T2 b)
{
   return sqrt( sqr(a)+sqr(b));
  //double absa,absb;
  //absa=fabs(a);
  //absb=fabs(b);
  //if(absa>absb)
  //  return absa*sqrt(1.0+sqr(absb/absa));
  //else
  //  return(absb==0.0)?0.0:absb*sqrt(1.0+sqr(absa/absb));
}

template<typename T>
double sign( const T a, const T b) {
   return (b<0.0) ? -a : a;
}

template<typename T1, typename T2>
T2 SetNewVector( const T1& t1 ) {
   T2 t2(t1.size());
   for ( unsigned int i=0; i<t1.size( ); ++i )
      t2[i] = t1[i];
   return t2;
}

template<typename T1, typename T2>
T2 SetNewVectorOfVectors( const T1& t1 ) {
   T2 t2(t1.size());
   for ( unsigned int i=0; i<t1.size( ); ++i )
      t2[i].resize(t1[0].size());
   for ( unsigned int i=0; i<t1.size( ); ++i )
   for ( unsigned int j=0; i<t1[0].size( ); ++j )
      t2[i][j] = t1[i][j];
   return t2;
}


std::vector<double> AddZerothElementToVector( const std::vector<double>& vin ) {
   std::vector<double> v(1,0.0);
   v.insert( v.end(), vin.begin(), vin.end() );
   return v;
}

std::vector<double> RemoveZerothElementFromVector( const std::vector<double>& vin ) {
   return( std::vector<double>(++vin.begin(), vin.end()));
}

std::vector<std::vector<double> > AddZerothElementToVectorOfVectors( const std::vector<std::vector<double> >& vin ) {
   const unsigned int vinSize = vin.size();
   const unsigned int NewElementSize = vin[0].size()+1;

   std::vector<std::vector<double> > v(1,std::vector<double>(NewElementSize, 0.0));
   for ( unsigned int i=0; i<vinSize; ++i )
      v.push_back( AddZerothElementToVector( vin[i] ) );
   return v;
}

std::vector<std::vector<double> > RemoveZerothElementFromVectorOfVectors( const std::vector<std::vector<double> >& vin ) {
   const unsigned int vinSize = vin.size();

   std::vector<std::vector<double> > v;
   for ( unsigned int i=1; i<vinSize; ++i )
      v.push_back( RemoveZerothElementFromVector( vin[i] ) );

   return v;
}

void One_Based_svdcmp(std::vector<std::vector<double> >& a, int m, int n, std::vector<double>& w, std::vector<std::vector<double> > & v)
{
  double g,scale,anorm;
  double *rv1=new double [n]-1;
  g=scale=anorm=0.0;
  int l;
  for(int i=1;i<=n;++i){
    l=i+1;
    rv1[i]=scale*g;
    g=scale=0.0;
    if(i<=m){
      for(int k=i;k<=m;++k) scale+=fabs(a[k][i]);
      if(scale){
        double s=0.0;
        for(int k=i;k<=m;++k){
          a[k][i]/=scale;
          s+=a[k][i]*a[k][i];
        }
        double f=a[i][i];
        g=-sign(sqrt(s),f);
        double h=f*g-s;
        a[i][i]=f-g;
        for(int j=l;j<=n;++j){
          double sum=0.0;
          for(int k=i;k<=m;++k) sum+=a[k][i]*a[k][j];
          double fct=sum/h;
          for(int k=i;k<=m;++k) a[k][j]+=fct*a[k][i];
        }
        for(int k=i;k<=m;++k) a[k][i]*=scale;
      }
    }
    w[i]=scale*g;
    g=scale=0.0;
    if((i<=m)&&(i!=n)){
      for(int k=l;k<=n;++k) scale+=fabs(a[i][k]);
      if(scale){
        double s=0.0;
        for(int k=l;k<=n;++k){
          a[i][k]/=scale;
          s+=a[i][k]*a[i][k];
        }
        double f=a[i][l];
        g=-sign(sqrt(s),f);
        double h=f*g-s;
        a[i][l]=f-g;
        for(int k=l;k<=n;++k) rv1[k]=a[i][k]/h;
        for(int j=l;j<=m;++j){
          double sum=0.0;
          for(int k=l;k<=n;++k) sum+=a[j][k]*a[i][k];
          for(int k=l;k<=n;++k) a[j][k]+=sum*rv1[k];
        }
        for(int k=l;k<=n;++k) a[i][k]*=scale;
      }
    }
    anorm=std::max(anorm,(fabs(w[i])+fabs(rv1[i])));
  }
  {
    double f;
    for(int i=n,l;i>=1;--i){
      if(i<n){       // this makes f and l not dependent
        if(f){
          for(int j=l;j<=n;++j) v[j][i]=(a[i][j]/a[i][l])/f;
            for(int j=l;j<=n;++j){
            double sum=0.0;
            for(int k=l;k<=n;++k) sum+=a[i][k]*v[k][j];
            for(int k=l;k<=n;++k) v[k][j]+=sum*v[k][i];
          }
        }
        for(int j=l;j<=n;++j) v[i][j]=v[j][i]=0.0;
      }
      v[i][i]=1.0;
      f=rv1[i];
      l=i;
    }
  }
  for(int i=std::min(m,n);i>=1;--i){
    int l=i+1;
    g=w[i];
    for(int j=l;j<=n;++j) a[i][j]=0.0;
    if(g){
      g=1.0/g;
      for(int j=l;j<=n;++j){
        double sum=0.0;
        for(int k=l;k<=m;++k) sum+=a[k][i]*a[k][j];
        double f=(sum/a[i][i])*g;
        for(int k=i;k<=m;++k) a[k][j]+=f*a[k][i];
      }
      for(int j=i;j<=m;++j) a[j][i]*=g;
    }else for(int j=i;j<=m;++j) a[j][i]=0.0;
    ++a[i][i];
  }
  for(int k=n;k>=1;--k){
    for(int its=1;its<=30;++its){
      int flag=1,nm,l;
      for(l=k;l>=1;--l){
        nm=l-1;
        if((double)(fabs(rv1[l])+anorm)==anorm){
          flag=0;
          break;
        }
        if((double)(fabs(w[nm])+anorm)==anorm) break;
      }
      if(flag){
        double c=0.0,s=1.0;
        for(int i=l;i<=k;++i){
          double f=s*rv1[i];
          rv1[i]=c*rv1[i];
          if((double)(fabs(f)+anorm)==anorm) break;
          g=w[i];
          double h=pythag(f,g);
          w[i]=h;
          h=1.0/h;
          c=g*h;
          s=-f*h;
          for(int j=1;j<=m;++j){
            double y=a[j][nm];
            double z=a[j][i];
            a[j][nm]=y*c+z*s;
            a[j][i]=z*c-y*s;
          }
        }
      }
      double z=w[k];
      if(l==k){
        if(z<0.0){
          w[k]=-z;
          for(int j=1;j<=n;++j) v[j][k]=-v[j][k];
        }
        break;
      }
      if(its==60) exit(fprintf(stderr,"no convergence in 30 svdcmp iterations"));
      double x=w[l];
      double y=w[nm=k-1];
      g=rv1[nm];
      double h=rv1[k];
      double f=((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);
      g=pythag(f,1.0);
      f=((x-z)*(x+z)+h*((y/(f+sign(g,f)))-h))/x;
      double c=1.0,s=1.0;
      for(int j=l;j<=nm;++j){
        int i=j+1;
        g=rv1[i];
        y=w[i];
        h=s*g;
        g*=c;
        z=pythag(f,h);
        rv1[j]=z;
        c=f/z;
        s=h/z;
        f=x*c+g*s;
        g=g*c-x*s;
        h=y*s;
        y*=c;
        for(int jj=1;jj<=n;++jj){
          x=v[jj][j];
          z=v[jj][i];
          v[jj][j]=x*c+z*s;
          v[jj][i]=z*c-x*s;
        }
        z=pythag(f,h);
        w[j]=z;
        if(z){
          z=1.0/z;
          c=f*z;
          s=h*z;
        }
        f=c*g+s*y;
        x=c*y-s*g;
        for(int jj=1;jj<=m;++jj){
          y=a[jj][j];
          z=a[jj][i];
          a[jj][j]=y*c+z*s;
          a[jj][i]=z*c-y*s;
        }
      }
      rv1[l]=0.0;
      rv1[k]=f;
      w[k]=x;
    }
  }
  delete (rv1+1);
}


//void svdcmp(std::vector<std::vector<long double> >& a, int m, int n, std::vector<long double>& w, std::vector<std::vector<long double> > & v)
//{
//  long double g,scale,anorm;
//  long double *rv1=new long double [n]-1;
//  g=scale=anorm=0.0;
//  int l;
//  for(int i=1;i<=n;++i){
//    l=i+1;
//    rv1[i]=scale*g;
//    g=scale=0.0;
//    if(i<=m){
//      for(int k=i;k<=m;++k) scale+=fabs(a[k][i]);
//      if(scale){
//        long double s=0.0;
//        for(int k=i;k<=m;++k){
//          a[k][i]/=scale;
//          s+=a[k][i]*a[k][i];
//        }
//        long double f=a[i][i];
//        g=-sign(sqrt(s),f);
//        long double h=f*g-s;
//        a[i][i]=f-g;
//        for(int j=l;j<=n;++j){
//          long double sum=0.0;
//          for(int k=i;k<=m;++k) sum+=a[k][i]*a[k][j];
//          long double fct=sum/h;
//          for(int k=i;k<=m;++k) a[k][j]+=fct*a[k][i];
//        }
//        for(int k=i;k<=m;++k) a[k][i]*=scale;
//      }
//    }
//    w[i]=scale*g;
//    g=scale=0.0;
//    if((i<=m)&&(i!=n)){
//      for(int k=l;k<=n;++k) scale+=fabs(a[i][k]);
//      if(scale){
//        long double s=0.0;
//        for(int k=l;k<=n;++k){
//          a[i][k]/=scale;
//          s+=a[i][k]*a[i][k];
//        }
//        long double f=a[i][l];
//        g=-sign(sqrt(s),f);
//        long double h=f*g-s;
//        a[i][l]=f-g;
//        for(int k=l;k<=n;++k) rv1[k]=a[i][k]/h;
//        for(int j=l;j<=m;++j){
//          long double sum=0.0;
//          for(int k=l;k<=n;++k) sum+=a[j][k]*a[i][k];
//          for(int k=l;k<=n;++k) a[j][k]+=sum*rv1[k];
//        }
//        for(int k=l;k<=n;++k) a[i][k]*=scale;
//      }
//    }
//    anorm=std::max(anorm,(fabs(w[i])+fabs(rv1[i])));
//  }
//  {
//    long double f;
//    for(int i=n,l;i>=1;--i){
//      if(i<n){       // this makes f and l not dependent
//        if(f){
//          for(int j=l;j<=n;++j) v[j][i]=(a[i][j]/a[i][l])/f;
//            for(int j=l;j<=n;++j){
//            long double sum=0.0;
//            for(int k=l;k<=n;++k) sum+=a[i][k]*v[k][j];
//            for(int k=l;k<=n;++k) v[k][j]+=sum*v[k][i];
//          }
//        }
//        for(int j=l;j<=n;++j) v[i][j]=v[j][i]=0.0;
//      }
//      v[i][i]=1.0;
//      f=rv1[i];
//      l=i;
//    }
//  }
//  for(int i=std::min(m,n);i>=1;--i){
//    int l=i+1;
//    g=w[i];
//    for(int j=l;j<=n;++j) a[i][j]=0.0;
//    if(g){
//      g=1.0/g;
//      for(int j=l;j<=n;++j){
//        long double sum=0.0;
//        for(int k=l;k<=m;++k) sum+=a[k][i]*a[k][j];
//        long double f=(sum/a[i][i])*g;
//        for(int k=i;k<=m;++k) a[k][j]+=f*a[k][i];
//      }
//      for(int j=i;j<=m;++j) a[j][i]*=g;
//    }else for(int j=i;j<=m;++j) a[j][i]=0.0;
//    ++a[i][i];
//  }
//  for(int k=n;k>=1;--k){
//    for(int its=1;its<=30;++its){
//      int flag=1,nm,l;
//      for(l=k;l>=1;--l){
//        nm=l-1;
//        if((long double)(fabs(rv1[l])+anorm)==anorm){
//          flag=0;
//          break;
//        }
//        if((long double)(fabs(w[nm])+anorm)==anorm) break;
//      }
//      if(flag){
//        long double c=0.0,s=1.0;
//        for(int i=l;i<=k;++i){
//          long double f=s*rv1[i];
//          rv1[i]=c*rv1[i];
//          if((long double)(fabs(f)+anorm)==anorm) break;
//          g=w[i];
//          long double h=pythag(f,g);
//          w[i]=h;
//          h=1.0/h;
//          c=g*h;
//          s=-f*h;
//          for(int j=1;j<=m;++j){
//            long double y=a[j][nm];
//            long double z=a[j][i];
//            a[j][nm]=y*c+z*s;
//            a[j][i]=z*c-y*s;
//          }
//        }
//      }
//      long double z=w[k];
//      if(l==k){
//        if(z<0.0){
//          w[k]=-z;
//          for(int j=1;j<=n;++j) v[j][k]=-v[j][k];
//        }
//        break;
//      }
//      if(its==60) exit(fprintf(stderr,"no convergence in 30 svdcmp iterations"));
//      long double x=w[l];
//      long double y=w[nm=k-1];
//      g=rv1[nm];
//      long double h=rv1[k];
//      long double f=((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);
//      g=pythag(f,1.0);
//      f=((x-z)*(x+z)+h*((y/(f+sign(g,f)))-h))/x;
//      long double c=1.0,s=1.0;
//      for(int j=l;j<=nm;++j){
//        int i=j+1;
//        g=rv1[i];
//        y=w[i];
//        h=s*g;
//        g*=c;
//        z=pythag(f,h);
//        rv1[j]=z;
//        c=f/z;
//        s=h/z;
//        f=x*c+g*s;
//        g=g*c-x*s;
//        h=y*s;
//        y*=c;
//        for(int jj=1;jj<=n;++jj){
//          x=v[jj][j];
//          z=v[jj][i];
//          v[jj][j]=x*c+z*s;
//          v[jj][i]=z*c-x*s;
//        }
//        z=pythag(f,h);
//        w[j]=z;
//        if(z){
//          z=1.0/z;
//          c=f*z;
//          s=h*z;
//        }
//        f=c*g+s*y;
//        x=c*y-s*g;
//        for(int jj=1;jj<=m;++jj){
//          y=a[jj][j];
//          z=a[jj][i];
//          a[jj][j]=y*c+z*s;
//          a[jj][i]=z*c-y*s;
//        }
//      }
//      rv1[l]=0.0;
//      rv1[k]=f;
//      w[k]=x;
//    }
//  }
//  delete (rv1+1);
//}

//void longdoublesvdcmp( std::vector<std::vector<double> >& a_double, int m, int n, std::vector<double>& w_double, std::vector<std::vector<double> > & v_double) {
//   std::vector<std::vector<long double> > a(SetNewVectorOfVectors<std::vector<std::vector<double> >, std::vector<std::vector<long double> >>( a_double ));
//   std::vector<std::vector<long double> > v(SetNewVectorOfVectors<std::vector<std::vector<double> >, std::vector<std::vector<long double> >>( v_double ));
//   std::vector<long double> w(SetNewVector<std::vector<double>, std::vector<long double> >( w_double ));
//
//   svdcmp( a, m, n, w, v );
//// void svdcmp(std::vector<std::vector<long double> >& a, int m, int n, std::vector<long double>& w, std::vector<std::vector<long double> > & v);
//
//   a_double = SetNewVectorOfVectors<std::vector<std::vector<long double> >, std::vector<std::vector<double> >>( a );
//   v_double = SetNewVectorOfVectors<std::vector<std::vector<long double> >, std::vector<std::vector<double> >>( v );
//   w_double = SetNewVector<std::vector<long double>, std::vector<double> >( w );
//}

void svdcmp(std::vector<std::vector<double> >& a, std::vector<double>& w, std::vector<std::vector<double> >& v) {
   int m = a.size();
   int n =  a[0].size();
   std::vector<std::vector<double> > aO(AddZerothElementToVectorOfVectors(a));
   std::vector<std::vector<double> > vO( n+1, std::vector<double>( n+1 ) );
   std::vector<double> wO(AddZerothElementToVector(w));
   One_Based_svdcmp( aO, m, n, wO, vO );
   a = RemoveZerothElementFromVectorOfVectors( aO );
   v = RemoveZerothElementFromVectorOfVectors( vO );
   w = RemoveZerothElementFromVector( wO );
}